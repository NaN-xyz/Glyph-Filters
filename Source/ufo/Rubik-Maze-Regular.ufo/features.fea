@standard = [ zero one two three four five six seven eight nine parenleft parenright ];

@sups = [ zerosuperior onesuperior twosuperior threesuperior foursuperior fivesuperior sixsuperior sevensuperior eightsuperior ninesuperior parenleftsuperior parenrightsuperior ];

@subs = [ zeroinferior oneinferior twoinferior threeinferior fourinferior fiveinferior sixinferior seveninferior eightinferior nineinferior parenleftinferior parenrightinferior ];

@numerator = [ zero.numerator one.numerator two.numerator three.numerator four.numerator five.numerator six.numerator seven.numerator eight.numerator nine.numerator parenleft.numerator parenright.numerator ];

@denominator = [ zero.denominator one.denominator two.denominator three.denominator four.denominator five.denominator six.denominator seven.denominator eight.denominator nine.denominator parenleft.denominator parenright.denominator ];

@tnum1 = [ zero.otlf one.otlf two.otlf three.otlf four.otlf five.otlf six.otlf seven.otlf eight.otlf nine.otlf parenleft.otlf parenright.otlf ];

@HebrewLetters = [ alef-hb bet-hb gimel-hb dalet-hb he-hb vav-hb zayin-hb het-hb tet-hb yod-hb finalkaf-hb kaf-hb lamed-hb finalmem-hb mem-hb finalnun-hb nun-hb samekh-hb ayin-hb finalpe-hb pe-hb finaltsadi-hb tsadi-hb qof-hb resh-hb shin-hb tav-hb ];

# Prefix: Languagesystems
# automatic
languagesystem DFLT dflt;

languagesystem latn dflt;
languagesystem latn ROM;
languagesystem latn MOL;
languagesystem latn CAT;

languagesystem hebr dflt;

feature ccmp {
sub yod-hb dagesh-hb by yoddagesh-hb;
sub vav-hb dagesh-hb by vavdagesh-hb;
} ccmp;

feature sups {
	sub @standard by @sups;
} sups;

feature aalt {
# automatic
feature sups;
feature locl;
feature subs;
feature frac;
feature ordn;
feature case;
} aalt;

feature locl {
# automatic
lookup locl_latn_0 {
	script latn;
	language ROM;
	language MOL;
	sub Scedilla by Scommaaccent;
	sub scedilla by scommaaccent;
} locl_latn_0;

lookup locl_latn_1 {
	script latn;
	language CAT;
	sub  l' periodcentered' l by ldot;
	sub  L' periodcentered' L by Ldot;
} locl_latn_1;
} locl;

feature subs {
# automatic
sub zero by zeroinferior;
sub one by oneinferior;
sub two by twoinferior;
sub three by threeinferior;
sub four by fourinferior;
sub five by fiveinferior;
sub six by sixinferior;
sub seven by seveninferior;
sub eight by eightinferior;
sub nine by nineinferior;
sub parenleft by parenleftinferior;
sub parenright by parenrightinferior;
} subs;

feature frac {
    lookup FractionBar {
        ignore sub slash @standard @standard @standard @standard @standard @standard @standard @standard @standard @standard slash';
        ignore sub slash' @standard @standard @standard @standard @standard @standard @standard @standard @standard @standard slash;
        ignore sub slash @standard @standard @standard @standard @standard @standard @standard @standard @standard slash';
        ignore sub slash' @standard @standard @standard @standard @standard @standard @standard @standard @standard slash;
        ignore sub slash @standard @standard @standard @standard @standard @standard @standard @standard slash';
        ignore sub slash' @standard @standard @standard @standard @standard @standard @standard @standard slash;
        ignore sub slash @standard @standard @standard @standard @standard @standard @standard slash';
        ignore sub slash' @standard @standard @standard @standard @standard @standard @standard slash;
        ignore sub slash @standard @standard @standard @standard @standard @standard slash';
        ignore sub slash' @standard @standard @standard @standard @standard @standard slash;
        ignore sub slash @standard @standard @standard @standard @standard slash';
        ignore sub slash' @standard @standard @standard @standard @standard slash;
        ignore sub slash @standard @standard @standard @standard slash';
        ignore sub slash' @standard @standard @standard @standard slash;
        ignore sub slash @standard @standard @standard slash';
        ignore sub slash' @standard @standard @standard slash;
        ignore sub slash @standard @standard slash';
        ignore sub slash' @standard @standard slash;
        ignore sub slash @standard slash';
        ignore sub slash' @standard slash;
        ignore sub slash slash';
        ignore sub slash' slash;
        sub @standard slash' @standard by fraction;
    } FractionBar;

    lookup Numerator1 {
        sub @standard' fraction by @numerator;
    } Numerator1;

    lookup Numerator2 {
        sub @standard' @numerator fraction by @numerator;
    } Numerator2;

    lookup Numerator3 {
        sub @standard' @numerator @numerator fraction by @numerator;
    } Numerator3;

    lookup Numerator4 {
        sub @standard' @numerator @numerator @numerator fraction by @numerator;
    } Numerator4;

    lookup Numerator5 {
        sub @standard' @numerator @numerator @numerator @numerator fraction by @numerator;
    } Numerator5;

    lookup Numerator6 {
        sub @standard' @numerator @numerator @numerator @numerator @numerator fraction by @numerator;
    } Numerator6;

    lookup Numerator7 {
        sub @standard' @numerator @numerator @numerator @numerator @numerator @numerator fraction by @numerator;
    } Numerator7;

    lookup Numerator8 {
        sub @standard' @numerator @numerator @numerator @numerator @numerator @numerator @numerator fraction by @numerator;
    } Numerator8;

    lookup Numerator9 {
        sub @standard' @numerator @numerator @numerator @numerator @numerator @numerator @numerator @numerator fraction by @numerator;
    } Numerator9;

    lookup Numerator10 {      
    sub @standard' @numerator @numerator @numerator @numerator @numerator @numerator @numerator @numerator @numerator fraction by @numerator;
    } Numerator10;

    lookup Denominator {
        sub [fraction @denominator] @standard' by @denominator;
    } Denominator;

    sub @standard space' @numerator by space;
} frac;

feature liga {
# Standard Ligatures
  sub f i by fi;
  sub f l by fl;
  sub f f by f_f;
  sub f f i by f_f_i;
  sub f f l by f_f_l;
} liga;

feature dlig {
	sub a e by ae;
	sub A E by AE;
	sub o e by oe;
	sub O E by OE;
	sub i j by ij;
	sub I J by IJ;
	sub period period period by ellipsis;
} dlig;

feature ordn {
# automatic
sub [zero one two three four five six seven eight nine] [A a]' by ordfeminine;
sub [zero one two three four five six seven eight nine] [O o]' by ordmasculine;
sub N o period by numero;
} ordn;

feature case {
# automatic
sub braceleft by braceleft.case;
sub braceright by braceright.case;
sub bracketleft by bracketleft.case;
sub bracketright by bracketright.case;
sub parenleft by parenleft.case;
sub parenright by parenright.case;
sub emdash by emdash.case;
sub endash by endash.case;
sub hyphen by hyphen.case;
sub guillemetleft by guillemetleft.case;
sub guillemetright by guillemetright.case;
sub guilsinglleft by guilsinglleft.case;
sub guilsinglright by guilsinglright.case;
sub plus by plus.case;
sub minus by minus.case;
sub multiply by multiply.case;
sub divide by divide.case;
sub equal by equal.case;
sub notequal by notequal.case;
sub approxequal by approxequal.case;
sub asciitilde by asciitilde.case;
sub at by at.case;
sub dieresiscomb by dieresiscomb.case;
sub dotaccentcomb by dotaccentcomb.case;
sub gravecomb by gravecomb.case;
sub acutecomb by acutecomb.case;
sub hungarumlautcomb by hungarumlautcomb.case;
sub circumflexcomb by circumflexcomb.case;
sub caroncomb by caroncomb.case;
sub brevecomb by brevecomb.case;
sub ringcomb by ringcomb.case;
sub tildecomb by tildecomb.case;
sub macroncomb by macroncomb.case;
sub commaaccentcomb by commaaccentcomb.case;
sub cedillacomb by cedillacomb.case;
sub ogonekcomb by ogonekcomb.case;
sub brevecomb-cy by brevecomb-cy.case;
} case;

